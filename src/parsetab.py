
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL COLON COMA CONST DECREMENT_OPERATOR DECREMENT_SELF_ASSIGN_OPERATOR DIVIDE DO DOTCOMA DOUBLE DOUBLETYPE ELSE EQUAL EQUALS FALSE FINAL FOR GREATER_THAN GREATER_THAN_EQUAL HASHSETTYPE ID IF INCREMENT_OPERATOR INCREMENT_SELF_ASSIGN_OPERATOR INT INTTYPE LATE LCURLY_BRACKET LESS_THAN LESS_THAN_EQUAL LINKEDHASHSETTYPE LIST LPAREN LSBRACKET METHOD MINUS NEG NOT_EQUAL NULLSAFE NUM OBJTYPE OR PLUS PRINT RCURLY_BRACKET RECORD_ARG RETURN RPAREN RSBRACKET SETTYPE SPLAYTREESETTYPE STATIC STR STRINGTYPE TIMES TRUE VAR VOID WHILEcodeLine : LIST OBJTYPE ID EQUALS LSBRACKET RSBRACKET DOTCOMA\n  | LIST OBJTYPE ID EQUALS LIST OBJTYPE LPAREN RPAREN DOTCOMA\n  | LIST OBJTYPE ID EQUALS LIST LPAREN RPAREN DOTCOMA\n  codeLine : LIST OBJTYPE ID EQUALS LSBRACKET values RSBRACKET DOTCOMAcodeLine : IF LPAREN conditionProduction RPAREN LCURLY_BRACKET RCURLY_BRACKET\n  | IF LPAREN conditionProduction RPAREN LCURLY_BRACKET\n  | RCURLY_BRACKET\n  codeLine : ELSE LCURLY_BRACKET RCURLY_BRACKET\n  | IF LCURLY_BRACKET\n  codeLine : ELSE IF LPAREN conditionProduction RPAREN LCURLY_BRACKET RCURLY_BRACKET\n  | ELSE IF LPAREN conditionProduction RPAREN LCURLY_BRACKET\n  codeLine : types ID LPAREN LCURLY_BRACKET typesVarProduction RCURLY_BRACKET RPAREN LCURLY_BRACKET RCURLY_BRACKET\n  | types ID LPAREN LCURLY_BRACKET typesVarProduction RCURLY_BRACKET RPAREN LCURLY_BRACKET\n  condition : ID comparator IDconditionProduction : condition\n  | condition logicalOperator conditionProduction\n  values : value\n  | value COMA values\n  value : INT\n  | STR\n  | DOUBLE\n  | TRUE\n  | FALSE\n  types : VAR\n  | CONST\n  | FINAL\n  | VOID\n  | STATIC\n  | BOOL\n   explicit_types : INTTYPE\n      | DOUBLETYPE\n      | STRINGTYPE\n      | HASHSETTYPE\n      | SETTYPE\n      | LINKEDHASHSETTYPE\n      | SPLAYTREESETTYPE\n      | BOOL\n      | record_shape\n  typesVarProduction : types ID\n  | types ID COMA typesVarProduction\n  logicalOperator : AND\n  | OR\n  comparator : GREATER_THAN\n  | GREATER_THAN_EQUAL\n  | LESS_THAN\n  | LESS_THAN_EQUAL\n  | EQUAL\n   codeLine : types ID EQUALS value DOTCOMA\n        | var_mods explicit_types ID DOTCOMA\n        | var_mods explicit_types NULLSAFE ID DOTCOMA\n        | LATE explicit_types nullsafe_mod ID DOTCOMA\n     nullsafe_mod : empty\n        | NULLSAFE\n     var_mods : empty\n        | FINAL\n        | CONST\n    record_shape : LPAREN record_shape_def RPAREN\n    | LPAREN LCURLY_BRACKET record_shape_named_def RCURLY_BRACKET RPAREN\n   record_shape_def : explicit_types\n      | explicit_types COMA record_shape_def\n   record_shape_named_def : explicit_types ID\n      | explicit_types ID COMA record_shape_named_def\n  empty : codeLine : VAR ID EQUALS record DOTCOMA\n      | CONST ID EQUALS LPAREN record_content RPAREN DOTCOMA\n      | FINAL ID EQUALS LPAREN record_content RPAREN DOTCOMA\n      | record_shape ID EQUALS record DOTCOMA\n   record : LPAREN record_content RPAREN record_content : empty\n      | value\n      | value COMA record_content\n      | types COLON value\n      | types COLON value COMA record_content\n   codeLine : WHILE LPAREN evaluable_condition RPAREN LCURLY_BRACKET RCURLY_BRACKET\n     codeLine : DO LCURLY_BRACKET RCURLY_BRACKET WHILE LPAREN evaluable_condition RPAREN DOTCOMA\n        | DO LCURLY_BRACKET codeLine RCURLY_BRACKET WHILE LPAREN evaluable_condition RPAREN DOTCOMA\n     evaluable_condition : TRUE\n         | FALSE\n         | conditionProduction\n         | invoke\n         | NEG evaluable_condition\n         | NEG LPAREN evaluable_condition RPAREN\n     invoke : ID LPAREN values RPAREN\n        | ID LPAREN RPAREN\n        | ID METHOD LPAREN values RPAREN\n    '
    
_lr_action_items = {'LIST':([0,45,76,],[2,2,113,]),'IF':([0,6,45,],[4,36,4,]),'RCURLY_BRACKET':([0,34,35,45,48,54,74,75,78,98,117,122,126,127,128,129,136,137,149,150,151,152,159,168,170,175,176,182,183,184,185,187,189,190,192,],[5,-9,54,74,77,-8,-7,112,-61,-49,150,153,-48,-50,-51,-64,-67,159,-62,-5,170,-39,-74,-1,-10,-65,-66,-3,-4,-40,190,-75,-2,-12,-76,]),'ELSE':([0,45,],[6,6,]),'LATE':([0,45,],[9,9,]),'VAR':([0,45,91,102,103,104,155,171,186,],[10,10,123,123,123,123,123,123,123,]),'CONST':([0,45,91,102,103,104,155,171,186,],[11,11,124,124,124,124,124,124,124,]),'FINAL':([0,45,91,102,103,104,155,171,186,],[12,12,125,125,125,125,125,125,125,]),'WHILE':([0,45,74,112,],[14,14,111,144,]),'DO':([0,45,],[15,15,]),'VOID':([0,45,91,102,103,104,155,171,186,],[16,16,16,16,16,16,16,16,16,]),'STATIC':([0,45,91,102,103,104,155,171,186,],[17,17,17,17,17,17,17,17,17,]),'BOOL':([0,3,8,9,11,12,19,22,45,50,91,102,103,104,116,155,171,186,],[18,31,31,31,-56,-55,-54,31,18,31,18,18,18,18,31,18,18,18,]),'LPAREN':([0,3,4,8,9,11,12,14,19,22,36,37,45,50,63,64,65,66,72,73,110,111,113,116,144,145,],[3,3,33,3,3,-56,-55,44,-54,3,55,56,3,3,102,103,104,102,108,109,142,143,146,3,165,166,]),'INTTYPE':([0,3,8,9,11,12,19,22,45,50,116,],[-63,24,24,24,-56,-55,-54,24,-63,24,24,]),'DOUBLETYPE':([0,3,8,9,11,12,19,22,45,50,116,],[-63,25,25,25,-56,-55,-54,25,-63,25,25,]),'STRINGTYPE':([0,3,8,9,11,12,19,22,45,50,116,],[-63,26,26,26,-56,-55,-54,26,-63,26,26,]),'HASHSETTYPE':([0,3,8,9,11,12,19,22,45,50,116,],[-63,27,27,27,-56,-55,-54,27,-63,27,27,]),'SETTYPE':([0,3,8,9,11,12,19,22,45,50,116,],[-63,28,28,28,-56,-55,-54,28,-63,28,28,]),'LINKEDHASHSETTYPE':([0,3,8,9,11,12,19,22,45,50,116,],[-63,29,29,29,-56,-55,-54,29,-63,29,29,]),'SPLAYTREESETTYPE':([0,3,8,9,11,12,19,22,45,50,116,],[-63,30,30,30,-56,-55,-54,30,-63,30,30,]),'$end':([1,5,34,54,98,117,126,127,128,129,136,150,151,159,168,170,175,176,182,183,185,187,189,190,192,],[0,-7,-9,-8,-49,-6,-48,-50,-51,-64,-67,-5,-11,-74,-1,-10,-65,-66,-3,-4,-13,-75,-2,-12,-76,]),'OBJTYPE':([2,113,],[20,145,]),'LCURLY_BRACKET':([3,4,6,15,56,80,106,120,172,],[22,34,35,45,91,117,137,151,185,]),'ID':([7,10,11,12,13,16,17,18,20,24,25,26,27,28,29,30,31,32,33,38,39,44,47,49,55,59,60,61,62,72,81,82,83,84,85,86,87,88,89,108,115,121,123,124,125,143,165,],[37,40,41,42,43,-27,-28,-29,46,-30,-31,-32,-33,-34,-35,-36,-37,-38,53,58,-63,73,-57,78,53,99,100,-52,-53,73,53,-41,-42,119,-43,-44,-45,-46,-47,73,-58,152,-24,-25,-26,73,73,]),'COLON':([16,17,18,123,124,125,133,],[-27,-28,-29,-24,-25,-26,156,]),'RPAREN':([21,23,24,25,26,27,28,29,30,31,32,47,51,52,67,68,69,70,71,77,79,90,93,94,95,96,97,102,103,104,107,109,115,118,119,130,131,132,134,135,138,139,140,141,146,153,155,160,161,163,164,166,173,174,177,178,180,186,191,],[47,-59,-30,-31,-32,-33,-34,-35,-36,-37,-38,-57,80,-15,106,-77,-78,-79,-80,115,-60,120,-19,-20,-21,-22,-23,-63,-63,-63,-81,140,-58,-16,-14,154,-69,-70,157,158,160,161,-84,-17,167,172,-63,-82,-83,178,179,181,-71,-72,-18,-85,188,-63,-73,]),'COMA':([23,24,25,26,27,28,29,30,31,32,47,78,93,94,95,96,97,115,132,141,152,174,],[50,-30,-31,-32,-33,-34,-35,-36,-37,-38,-57,116,-19,-20,-21,-22,-23,-58,155,162,171,186,]),'NULLSAFE':([24,25,26,27,28,29,30,31,32,38,39,47,115,],[-30,-31,-32,-33,-34,-35,-36,-37,-38,59,62,-57,-58,]),'EQUALS':([37,40,41,42,43,46,],[57,63,64,65,66,76,]),'TRUE':([44,57,72,102,103,104,108,109,114,142,143,155,156,162,165,186,],[68,96,68,96,96,96,68,96,96,96,68,96,96,96,68,96,]),'FALSE':([44,57,72,102,103,104,108,109,114,142,143,155,156,162,165,186,],[69,97,69,97,97,97,69,97,97,97,69,97,97,97,69,97,]),'NEG':([44,72,108,143,165,],[72,72,72,72,72,]),'AND':([52,119,],[82,-14,]),'OR':([52,119,],[83,-14,]),'GREATER_THAN':([53,73,],[85,85,]),'GREATER_THAN_EQUAL':([53,73,],[86,86,]),'LESS_THAN':([53,73,],[87,87,]),'LESS_THAN_EQUAL':([53,73,],[88,88,]),'EQUAL':([53,73,],[89,89,]),'INT':([57,102,103,104,109,114,142,155,156,162,186,],[93,93,93,93,93,93,93,93,93,93,93,]),'STR':([57,102,103,104,109,114,142,155,156,162,186,],[94,94,94,94,94,94,94,94,94,94,94,]),'DOUBLE':([57,102,103,104,109,114,142,155,156,162,186,],[95,95,95,95,95,95,95,95,95,95,95,]),'DOTCOMA':([58,92,93,94,95,96,97,99,100,101,105,147,154,157,158,167,169,179,181,188,],[98,126,-19,-20,-21,-22,-23,127,128,129,136,168,-68,175,176,182,183,187,189,192,]),'METHOD':([73,],[110,]),'LSBRACKET':([76,],[114,]),'RSBRACKET':([93,94,95,96,97,114,141,148,177,],[-19,-20,-21,-22,-23,147,-17,169,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codeLine':([0,45,],[1,75,]),'types':([0,45,91,102,103,104,155,171,186,],[7,7,121,133,133,133,133,121,133,]),'var_mods':([0,45,],[8,8,]),'record_shape':([0,3,8,9,22,45,50,116,],[13,32,32,32,32,13,32,32,]),'empty':([0,39,45,102,103,104,155,186,],[19,61,19,131,131,131,131,131,]),'record_shape_def':([3,50,],[21,79,]),'explicit_types':([3,8,9,22,50,116,],[23,38,39,49,23,49,]),'record_shape_named_def':([22,116,],[48,149,]),'conditionProduction':([33,44,55,72,81,108,143,165,],[51,70,90,70,118,70,70,70,]),'condition':([33,44,55,72,81,108,143,165,],[52,52,52,52,52,52,52,52,]),'nullsafe_mod':([39,],[60,]),'evaluable_condition':([44,72,108,143,165,],[67,107,138,164,180,]),'invoke':([44,72,108,143,165,],[71,71,71,71,71,]),'logicalOperator':([52,],[81,]),'comparator':([53,73,],[84,84,]),'value':([57,102,103,104,109,114,142,155,156,162,186,],[92,132,132,132,141,141,141,132,174,141,132,]),'record':([63,66,],[101,105,]),'typesVarProduction':([91,171,],[122,184,]),'record_content':([102,103,104,155,186,],[130,134,135,173,191,]),'values':([109,114,142,162,],[139,148,163,177,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codeLine","S'",1,None,None,None),
  ('codeLine -> LIST OBJTYPE ID EQUALS LSBRACKET RSBRACKET DOTCOMA','codeLine',7,'p_emptyList','main.py',5),
  ('codeLine -> LIST OBJTYPE ID EQUALS LIST OBJTYPE LPAREN RPAREN DOTCOMA','codeLine',9,'p_emptyList','main.py',6),
  ('codeLine -> LIST OBJTYPE ID EQUALS LIST LPAREN RPAREN DOTCOMA','codeLine',8,'p_emptyList','main.py',7),
  ('codeLine -> LIST OBJTYPE ID EQUALS LSBRACKET values RSBRACKET DOTCOMA','codeLine',8,'p_list','main.py',11),
  ('codeLine -> IF LPAREN conditionProduction RPAREN LCURLY_BRACKET RCURLY_BRACKET','codeLine',6,'p_ifStatement','main.py',14),
  ('codeLine -> IF LPAREN conditionProduction RPAREN LCURLY_BRACKET','codeLine',5,'p_ifStatement','main.py',15),
  ('codeLine -> RCURLY_BRACKET','codeLine',1,'p_ifStatement','main.py',16),
  ('codeLine -> ELSE LCURLY_BRACKET RCURLY_BRACKET','codeLine',3,'p_elseStatement','main.py',20),
  ('codeLine -> IF LCURLY_BRACKET','codeLine',2,'p_elseStatement','main.py',21),
  ('codeLine -> ELSE IF LPAREN conditionProduction RPAREN LCURLY_BRACKET RCURLY_BRACKET','codeLine',7,'p_ifElseStatement','main.py',25),
  ('codeLine -> ELSE IF LPAREN conditionProduction RPAREN LCURLY_BRACKET','codeLine',6,'p_ifElseStatement','main.py',26),
  ('codeLine -> types ID LPAREN LCURLY_BRACKET typesVarProduction RCURLY_BRACKET RPAREN LCURLY_BRACKET RCURLY_BRACKET','codeLine',9,'p_NamedParametersfunction','main.py',30),
  ('codeLine -> types ID LPAREN LCURLY_BRACKET typesVarProduction RCURLY_BRACKET RPAREN LCURLY_BRACKET','codeLine',8,'p_NamedParametersfunction','main.py',31),
  ('condition -> ID comparator ID','condition',3,'p_condition','main.py',35),
  ('conditionProduction -> condition','conditionProduction',1,'p_conditionProduction','main.py',38),
  ('conditionProduction -> condition logicalOperator conditionProduction','conditionProduction',3,'p_conditionProduction','main.py',39),
  ('values -> value','values',1,'p_values','main.py',43),
  ('values -> value COMA values','values',3,'p_values','main.py',44),
  ('value -> INT','value',1,'p_value','main.py',48),
  ('value -> STR','value',1,'p_value','main.py',49),
  ('value -> DOUBLE','value',1,'p_value','main.py',50),
  ('value -> TRUE','value',1,'p_value','main.py',51),
  ('value -> FALSE','value',1,'p_value','main.py',52),
  ('types -> VAR','types',1,'p_types','main.py',56),
  ('types -> CONST','types',1,'p_types','main.py',57),
  ('types -> FINAL','types',1,'p_types','main.py',58),
  ('types -> VOID','types',1,'p_types','main.py',59),
  ('types -> STATIC','types',1,'p_types','main.py',60),
  ('types -> BOOL','types',1,'p_types','main.py',61),
  ('explicit_types -> INTTYPE','explicit_types',1,'p_explicit_types','main.py',65),
  ('explicit_types -> DOUBLETYPE','explicit_types',1,'p_explicit_types','main.py',66),
  ('explicit_types -> STRINGTYPE','explicit_types',1,'p_explicit_types','main.py',67),
  ('explicit_types -> HASHSETTYPE','explicit_types',1,'p_explicit_types','main.py',68),
  ('explicit_types -> SETTYPE','explicit_types',1,'p_explicit_types','main.py',69),
  ('explicit_types -> LINKEDHASHSETTYPE','explicit_types',1,'p_explicit_types','main.py',70),
  ('explicit_types -> SPLAYTREESETTYPE','explicit_types',1,'p_explicit_types','main.py',71),
  ('explicit_types -> BOOL','explicit_types',1,'p_explicit_types','main.py',72),
  ('explicit_types -> record_shape','explicit_types',1,'p_explicit_types','main.py',73),
  ('typesVarProduction -> types ID','typesVarProduction',2,'p_typesVarProduction','main.py',77),
  ('typesVarProduction -> types ID COMA typesVarProduction','typesVarProduction',4,'p_typesVarProduction','main.py',78),
  ('logicalOperator -> AND','logicalOperator',1,'p_logicalOperator','main.py',82),
  ('logicalOperator -> OR','logicalOperator',1,'p_logicalOperator','main.py',83),
  ('comparator -> GREATER_THAN','comparator',1,'p_comparator','main.py',87),
  ('comparator -> GREATER_THAN_EQUAL','comparator',1,'p_comparator','main.py',88),
  ('comparator -> LESS_THAN','comparator',1,'p_comparator','main.py',89),
  ('comparator -> LESS_THAN_EQUAL','comparator',1,'p_comparator','main.py',90),
  ('comparator -> EQUAL','comparator',1,'p_comparator','main.py',91),
  ('codeLine -> types ID EQUALS value DOTCOMA','codeLine',5,'p_declaration','main.py',98),
  ('codeLine -> var_mods explicit_types ID DOTCOMA','codeLine',4,'p_declaration','main.py',99),
  ('codeLine -> var_mods explicit_types NULLSAFE ID DOTCOMA','codeLine',5,'p_declaration','main.py',100),
  ('codeLine -> LATE explicit_types nullsafe_mod ID DOTCOMA','codeLine',5,'p_declaration','main.py',101),
  ('nullsafe_mod -> empty','nullsafe_mod',1,'p_nullsafe_mod','main.py',105),
  ('nullsafe_mod -> NULLSAFE','nullsafe_mod',1,'p_nullsafe_mod','main.py',106),
  ('var_mods -> empty','var_mods',1,'p_var_mods','main.py',110),
  ('var_mods -> FINAL','var_mods',1,'p_var_mods','main.py',111),
  ('var_mods -> CONST','var_mods',1,'p_var_mods','main.py',112),
  ('record_shape -> LPAREN record_shape_def RPAREN','record_shape',3,'p_record_shape','main.py',117),
  ('record_shape -> LPAREN LCURLY_BRACKET record_shape_named_def RCURLY_BRACKET RPAREN','record_shape',5,'p_record_shape','main.py',118),
  ('record_shape_def -> explicit_types','record_shape_def',1,'p_record_shape_def','main.py',122),
  ('record_shape_def -> explicit_types COMA record_shape_def','record_shape_def',3,'p_record_shape_def','main.py',123),
  ('record_shape_named_def -> explicit_types ID','record_shape_named_def',2,'p_record_shape_named_def','main.py',126),
  ('record_shape_named_def -> explicit_types ID COMA record_shape_named_def','record_shape_named_def',4,'p_record_shape_named_def','main.py',127),
  ('empty -> <empty>','empty',0,'p_empty','main.py',131),
  ('codeLine -> VAR ID EQUALS record DOTCOMA','codeLine',5,'p_record_variable','main.py',135),
  ('codeLine -> CONST ID EQUALS LPAREN record_content RPAREN DOTCOMA','codeLine',7,'p_record_variable','main.py',136),
  ('codeLine -> FINAL ID EQUALS LPAREN record_content RPAREN DOTCOMA','codeLine',7,'p_record_variable','main.py',137),
  ('codeLine -> record_shape ID EQUALS record DOTCOMA','codeLine',5,'p_record_variable','main.py',138),
  ('record -> LPAREN record_content RPAREN','record',3,'p_record','main.py',141),
  ('record_content -> empty','record_content',1,'p_record_content','main.py',144),
  ('record_content -> value','record_content',1,'p_record_content','main.py',145),
  ('record_content -> value COMA record_content','record_content',3,'p_record_content','main.py',146),
  ('record_content -> types COLON value','record_content',3,'p_record_content','main.py',147),
  ('record_content -> types COLON value COMA record_content','record_content',5,'p_record_content','main.py',148),
  ('codeLine -> WHILE LPAREN evaluable_condition RPAREN LCURLY_BRACKET RCURLY_BRACKET','codeLine',6,'p_while','main.py',155),
  ('codeLine -> DO LCURLY_BRACKET RCURLY_BRACKET WHILE LPAREN evaluable_condition RPAREN DOTCOMA','codeLine',8,'p_do_while','main.py',159),
  ('codeLine -> DO LCURLY_BRACKET codeLine RCURLY_BRACKET WHILE LPAREN evaluable_condition RPAREN DOTCOMA','codeLine',9,'p_do_while','main.py',160),
  ('evaluable_condition -> TRUE','evaluable_condition',1,'p_evaluable_condition','main.py',164),
  ('evaluable_condition -> FALSE','evaluable_condition',1,'p_evaluable_condition','main.py',165),
  ('evaluable_condition -> conditionProduction','evaluable_condition',1,'p_evaluable_condition','main.py',166),
  ('evaluable_condition -> invoke','evaluable_condition',1,'p_evaluable_condition','main.py',167),
  ('evaluable_condition -> NEG evaluable_condition','evaluable_condition',2,'p_evaluable_condition','main.py',168),
  ('evaluable_condition -> NEG LPAREN evaluable_condition RPAREN','evaluable_condition',4,'p_evaluable_condition','main.py',169),
  ('invoke -> ID LPAREN values RPAREN','invoke',4,'p_invoke','main.py',176),
  ('invoke -> ID LPAREN RPAREN','invoke',3,'p_invoke','main.py',177),
  ('invoke -> ID METHOD LPAREN values RPAREN','invoke',5,'p_invoke','main.py',178),
]
