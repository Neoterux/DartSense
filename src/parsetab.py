
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND BOOL COLON COMA CONST DECREMENT_OPERATOR DECREMENT_SELF_ASSIGN_OPERATOR DIVIDE DOTCOMA DOUBLE DOUBLETYPE ELSE EQUAL EQUALS FALSE FINAL FOR GREATER_THAN GREATER_THAN_EQUAL HASHSETTYPE ID IF INCREMENT_OPERATOR INCREMENT_SELF_ASSIGN_OPERATOR INT INTTYPE LCURLY_BRACKET LESS_THAN LESS_THAN_EQUAL LINKEDHASHSETTYPE LIST LPAREN LSBRACKET METHOD MINUS NOT_EQUAL NUM OBJTYPE OR PLUS PRINT RCURLY_BRACKET RECORD_ARG RETURN RPAREN RSBRACKET SETTYPE SPLAYTREESETTYPE STATIC STR STRINGTYPE TIMES TRUE VAR VOID WHILEcodeLine : LIST OBJTYPE ID EQUALS LSBRACKET RSBRACKET DOTCOMA\n  | LIST OBJTYPE ID EQUALS LIST OBJTYPE LPAREN RPAREN DOTCOMA\n  | LIST OBJTYPE ID EQUALS LIST LPAREN RPAREN DOTCOMA\n  codeLine : LIST OBJTYPE ID EQUALS LSBRACKET values RSBRACKET DOTCOMAcodeLine : IF LPAREN conditionProduction RPAREN LCURLY_BRACKET RCURLY_BRACKET\n  | IF LPAREN conditionProduction RPAREN LCURLY_BRACKET\n  | RCURLY_BRACKET\n  codeLine : ELSE LCURLY_BRACKET RCURLY_BRACKET\n  | IF LCURLY_BRACKET\n  codeLine : ELSE IF LPAREN conditionProduction RPAREN LCURLY_BRACKET RCURLY_BRACKET\n  | ELSE IF LPAREN conditionProduction RPAREN LCURLY_BRACKET\n  codeLine : types ID LPAREN LCURLY_BRACKET typesVarProduction RCURLY_BRACKET RPAREN LCURLY_BRACKET RCURLY_BRACKET\n  | types ID LPAREN LCURLY_BRACKET typesVarProduction RCURLY_BRACKET RPAREN LCURLY_BRACKET\n  condition : ID comparator IDconditionProduction : condition\n  | condition logicalOperator conditionProduction\n  values : value\n  | value COMA values\n  value : INT\n  | STR\n  | DOUBLE\n  | TRUE\n  | FALSE\n  types : VAR\n  | CONST\n  | FINAL\n  | VOID\n  | STATIC\n  | BOOL\n   explicit_types : INTTYPE\n      | DOUBLETYPE\n      | STRINGTYPE\n      | HASHSETTYPE\n      | SETTYPE\n      | LINKEDHASHSETTYPE\n      | SPLAYTREESETTYPE\n      | BOOL\n      | record_shape\n\n  typesVarProduction : types ID\n  | types ID COMA typesVarProduction\n  logicalOperator : AND\n  | OR\n  comparator : GREATER_THAN\n  | GREATER_THAN_EQUAL\n  | LESS_THAN\n  | LESS_THAN_EQUAL\n  | EQUAL\n  record_shape : LPAREN record_shape_def RPAREN\n    | LPAREN LCURLY_BRACKET record_shape_named_def RCURLY_BRACKET RPAREN\n   record_shape_def : explicit_types\n      | explicit_types COMA record_shape_def\n   record_shape_named_def : explicit_types ID\n      | explicit_types ID COMA record_shape_named_def\n  empty : codeLine : VAR ID EQUALS record DOTCOMA\n      | CONST ID EQUALS LPAREN record_content RPAREN DOTCOMA\n      | FINAL ID EQUALS LPAREN record_content RPAREN DOTCOMA\n      | record_shape ID EQUALS record DOTCOMA\n   record : LPAREN record_content RPAREN record_content : empty\n      | value\n      | value COMA record_content\n      | types COLON value\n      | types COLON value COMA record_content\n  '
    
_lr_action_items = {'LIST':([0,52,],[2,73,]),'IF':([0,6,],[4,31,]),'RCURLY_BRACKET':([0,30,39,54,77,82,104,106,107,130,131,],[5,45,53,-52,105,108,-53,119,-39,-40,134,]),'ELSE':([0,],[6,]),'VAR':([0,67,69,70,71,110,120,132,],[8,83,83,83,83,83,83,83,]),'CONST':([0,67,69,70,71,110,120,132,],[9,84,84,84,84,84,84,84,]),'FINAL':([0,67,69,70,71,110,120,132,],[10,85,85,85,85,85,85,85,]),'VOID':([0,67,69,70,71,110,120,132,],[12,12,12,12,12,12,12,12,]),'STATIC':([0,67,69,70,71,110,120,132,],[13,13,13,13,13,13,13,13,]),'BOOL':([0,3,17,41,67,69,70,71,76,110,120,132,],[14,26,26,26,14,14,14,14,26,14,14,14,]),'LPAREN':([0,3,4,17,31,32,41,48,49,50,51,73,76,99,],[3,3,28,3,46,47,3,69,70,71,69,100,3,114,]),'$end':([1,5,29,45,77,86,98,105,106,116,119,124,125,127,128,131,133,134,],[0,-7,-9,-8,-6,-55,-58,-5,-11,-1,-10,-56,-57,-3,-4,-13,-2,-12,]),'OBJTYPE':([2,73,],[15,99,]),'LCURLY_BRACKET':([3,4,6,47,56,80,121,],[17,29,30,67,77,106,131,]),'INTTYPE':([3,17,41,76,],[19,19,19,19,]),'DOUBLETYPE':([3,17,41,76,],[20,20,20,20,]),'STRINGTYPE':([3,17,41,76,],[21,21,21,21,]),'HASHSETTYPE':([3,17,41,76,],[22,22,22,22,]),'SETTYPE':([3,17,41,76,],[23,23,23,23,]),'LINKEDHASHSETTYPE':([3,17,41,76,],[24,24,24,24,]),'SPLAYTREESETTYPE':([3,17,41,76,],[25,25,25,25,]),'ID':([7,8,9,10,11,12,13,14,15,19,20,21,22,23,24,25,26,27,28,38,40,46,57,58,59,60,61,62,63,64,65,75,81,83,84,85,],[32,33,34,35,36,-27,-28,-29,37,-30,-31,-32,-33,-34,-35,-36,-37,-38,44,-48,54,44,44,-41,-42,79,-43,-44,-45,-46,-47,-49,107,-24,-25,-26,]),'COLON':([12,13,14,83,84,85,90,],[-27,-28,-29,-24,-25,-26,111,]),'RPAREN':([16,18,19,20,21,22,23,24,25,26,27,38,42,43,53,55,66,69,70,71,75,78,79,87,88,89,91,92,93,94,95,96,97,100,108,110,114,122,123,132,135,],[38,-50,-30,-31,-32,-33,-34,-35,-36,-37,-38,-48,56,-15,75,-51,80,-54,-54,-54,-49,-16,-14,109,-60,-61,-19,-20,-21,-22,-23,112,113,115,121,-54,126,-62,-63,-54,-64,]),'COMA':([18,19,20,21,22,23,24,25,26,27,38,54,75,89,91,92,93,94,95,103,107,123,],[41,-30,-31,-32,-33,-34,-35,-36,-37,-38,-48,76,-49,110,-19,-20,-21,-22,-23,118,120,132,]),'EQUALS':([33,34,35,36,37,],[48,49,50,51,52,]),'AND':([43,79,],[58,-14,]),'OR':([43,79,],[59,-14,]),'GREATER_THAN':([44,],[61,]),'GREATER_THAN_EQUAL':([44,],[62,]),'LESS_THAN':([44,],[63,]),'LESS_THAN_EQUAL':([44,],[64,]),'EQUAL':([44,],[65,]),'LSBRACKET':([52,],[74,]),'DOTCOMA':([68,72,101,109,112,113,115,117,126,],[86,98,116,-59,124,125,127,128,133,]),'INT':([69,70,71,74,110,111,118,132,],[91,91,91,91,91,91,91,91,]),'STR':([69,70,71,74,110,111,118,132,],[92,92,92,92,92,92,92,92,]),'DOUBLE':([69,70,71,74,110,111,118,132,],[93,93,93,93,93,93,93,93,]),'TRUE':([69,70,71,74,110,111,118,132,],[94,94,94,94,94,94,94,94,]),'FALSE':([69,70,71,74,110,111,118,132,],[95,95,95,95,95,95,95,95,]),'RSBRACKET':([74,91,92,93,94,95,102,103,129,],[101,-19,-20,-21,-22,-23,117,-17,-18,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codeLine':([0,],[1,]),'types':([0,67,69,70,71,110,120,132,],[7,81,90,90,90,90,81,90,]),'record_shape':([0,3,17,41,76,],[11,27,27,27,27,]),'record_shape_def':([3,41,],[16,55,]),'explicit_types':([3,17,41,76,],[18,40,18,40,]),'record_shape_named_def':([17,76,],[39,104,]),'conditionProduction':([28,46,57,],[42,66,78,]),'condition':([28,46,57,],[43,43,43,]),'logicalOperator':([43,],[57,]),'comparator':([44,],[60,]),'record':([48,51,],[68,72,]),'typesVarProduction':([67,120,],[82,130,]),'record_content':([69,70,71,110,132,],[87,96,97,122,135,]),'empty':([69,70,71,110,132,],[88,88,88,88,88,]),'value':([69,70,71,74,110,111,118,132,],[89,89,89,103,89,123,103,89,]),'values':([74,118,],[102,129,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codeLine","S'",1,None,None,None),
  ('codeLine -> LIST OBJTYPE ID EQUALS LSBRACKET RSBRACKET DOTCOMA','codeLine',7,'p_emptyList','main.py',5),
  ('codeLine -> LIST OBJTYPE ID EQUALS LIST OBJTYPE LPAREN RPAREN DOTCOMA','codeLine',9,'p_emptyList','main.py',6),
  ('codeLine -> LIST OBJTYPE ID EQUALS LIST LPAREN RPAREN DOTCOMA','codeLine',8,'p_emptyList','main.py',7),
  ('codeLine -> LIST OBJTYPE ID EQUALS LSBRACKET values RSBRACKET DOTCOMA','codeLine',8,'p_list','main.py',11),
  ('codeLine -> IF LPAREN conditionProduction RPAREN LCURLY_BRACKET RCURLY_BRACKET','codeLine',6,'p_ifStatement','main.py',14),
  ('codeLine -> IF LPAREN conditionProduction RPAREN LCURLY_BRACKET','codeLine',5,'p_ifStatement','main.py',15),
  ('codeLine -> RCURLY_BRACKET','codeLine',1,'p_ifStatement','main.py',16),
  ('codeLine -> ELSE LCURLY_BRACKET RCURLY_BRACKET','codeLine',3,'p_elseStatement','main.py',20),
  ('codeLine -> IF LCURLY_BRACKET','codeLine',2,'p_elseStatement','main.py',21),
  ('codeLine -> ELSE IF LPAREN conditionProduction RPAREN LCURLY_BRACKET RCURLY_BRACKET','codeLine',7,'p_ifElseStatement','main.py',25),
  ('codeLine -> ELSE IF LPAREN conditionProduction RPAREN LCURLY_BRACKET','codeLine',6,'p_ifElseStatement','main.py',26),
  ('codeLine -> types ID LPAREN LCURLY_BRACKET typesVarProduction RCURLY_BRACKET RPAREN LCURLY_BRACKET RCURLY_BRACKET','codeLine',9,'p_NamedParametersfunction','main.py',30),
  ('codeLine -> types ID LPAREN LCURLY_BRACKET typesVarProduction RCURLY_BRACKET RPAREN LCURLY_BRACKET','codeLine',8,'p_NamedParametersfunction','main.py',31),
  ('condition -> ID comparator ID','condition',3,'p_condition','main.py',35),
  ('conditionProduction -> condition','conditionProduction',1,'p_conditionProduction','main.py',38),
  ('conditionProduction -> condition logicalOperator conditionProduction','conditionProduction',3,'p_conditionProduction','main.py',39),
  ('values -> value','values',1,'p_values','main.py',43),
  ('values -> value COMA values','values',3,'p_values','main.py',44),
  ('value -> INT','value',1,'p_value','main.py',48),
  ('value -> STR','value',1,'p_value','main.py',49),
  ('value -> DOUBLE','value',1,'p_value','main.py',50),
  ('value -> TRUE','value',1,'p_value','main.py',51),
  ('value -> FALSE','value',1,'p_value','main.py',52),
  ('types -> VAR','types',1,'p_types','main.py',56),
  ('types -> CONST','types',1,'p_types','main.py',57),
  ('types -> FINAL','types',1,'p_types','main.py',58),
  ('types -> VOID','types',1,'p_types','main.py',59),
  ('types -> STATIC','types',1,'p_types','main.py',60),
  ('types -> BOOL','types',1,'p_types','main.py',61),
  ('explicit_types -> INTTYPE','explicit_types',1,'p_explicit_types','main.py',65),
  ('explicit_types -> DOUBLETYPE','explicit_types',1,'p_explicit_types','main.py',66),
  ('explicit_types -> STRINGTYPE','explicit_types',1,'p_explicit_types','main.py',67),
  ('explicit_types -> HASHSETTYPE','explicit_types',1,'p_explicit_types','main.py',68),
  ('explicit_types -> SETTYPE','explicit_types',1,'p_explicit_types','main.py',69),
  ('explicit_types -> LINKEDHASHSETTYPE','explicit_types',1,'p_explicit_types','main.py',70),
  ('explicit_types -> SPLAYTREESETTYPE','explicit_types',1,'p_explicit_types','main.py',71),
  ('explicit_types -> BOOL','explicit_types',1,'p_explicit_types','main.py',72),
  ('explicit_types -> record_shape','explicit_types',1,'p_explicit_types','main.py',73),
  ('typesVarProduction -> types ID','typesVarProduction',2,'p_typesVarProduction','main.py',78),
  ('typesVarProduction -> types ID COMA typesVarProduction','typesVarProduction',4,'p_typesVarProduction','main.py',79),
  ('logicalOperator -> AND','logicalOperator',1,'p_logicalOperator','main.py',83),
  ('logicalOperator -> OR','logicalOperator',1,'p_logicalOperator','main.py',84),
  ('comparator -> GREATER_THAN','comparator',1,'p_comparator','main.py',88),
  ('comparator -> GREATER_THAN_EQUAL','comparator',1,'p_comparator','main.py',89),
  ('comparator -> LESS_THAN','comparator',1,'p_comparator','main.py',90),
  ('comparator -> LESS_THAN_EQUAL','comparator',1,'p_comparator','main.py',91),
  ('comparator -> EQUAL','comparator',1,'p_comparator','main.py',92),
  ('record_shape -> LPAREN record_shape_def RPAREN','record_shape',3,'p_record_shape','main.py',96),
  ('record_shape -> LPAREN LCURLY_BRACKET record_shape_named_def RCURLY_BRACKET RPAREN','record_shape',5,'p_record_shape','main.py',97),
  ('record_shape_def -> explicit_types','record_shape_def',1,'p_record_shape_def','main.py',101),
  ('record_shape_def -> explicit_types COMA record_shape_def','record_shape_def',3,'p_record_shape_def','main.py',102),
  ('record_shape_named_def -> explicit_types ID','record_shape_named_def',2,'p_record_shape_named_def','main.py',105),
  ('record_shape_named_def -> explicit_types ID COMA record_shape_named_def','record_shape_named_def',4,'p_record_shape_named_def','main.py',106),
  ('empty -> <empty>','empty',0,'p_empty','main.py',110),
  ('codeLine -> VAR ID EQUALS record DOTCOMA','codeLine',5,'p_record_variable','main.py',114),
  ('codeLine -> CONST ID EQUALS LPAREN record_content RPAREN DOTCOMA','codeLine',7,'p_record_variable','main.py',115),
  ('codeLine -> FINAL ID EQUALS LPAREN record_content RPAREN DOTCOMA','codeLine',7,'p_record_variable','main.py',116),
  ('codeLine -> record_shape ID EQUALS record DOTCOMA','codeLine',5,'p_record_variable','main.py',117),
  ('record -> LPAREN record_content RPAREN','record',3,'p_record','main.py',120),
  ('record_content -> empty','record_content',1,'p_record_content','main.py',123),
  ('record_content -> value','record_content',1,'p_record_content','main.py',124),
  ('record_content -> value COMA record_content','record_content',3,'p_record_content','main.py',125),
  ('record_content -> types COLON value','record_content',3,'p_record_content','main.py',126),
  ('record_content -> types COLON value COMA record_content','record_content',5,'p_record_content','main.py',127),
]
